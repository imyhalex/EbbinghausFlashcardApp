// <auto-generated />
using System;
using EbbinghausFlashcardApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EbbinghausFlashcardApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241109004303_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EbbinghausFlashcardApp.Models.Flashcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlashcardSetId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFamiliar")
                        .HasColumnType("bit");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardSetId");

                    b.ToTable("Flashcards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Definition = "to reduce in amount, degree, or severity",
                            FlashcardSetId = 1,
                            ImagePath = "/images/gre.jpg",
                            IsFamiliar = false,
                            Term = "abate"
                        },
                        new
                        {
                            Id = 2,
                            Definition = "deviating from the norm",
                            FlashcardSetId = 1,
                            ImagePath = "/images/gre.jpg",
                            IsFamiliar = false,
                            Term = "aberrant"
                        },
                        new
                        {
                            Id = 3,
                            Definition = "temporary suppression or suspension",
                            FlashcardSetId = 1,
                            ImagePath = "/images/gre.jpg",
                            IsFamiliar = false,
                            Term = "abeyance"
                        },
                        new
                        {
                            Id = 4,
                            Definition = "to reject; abandon formally",
                            FlashcardSetId = 1,
                            ImagePath = "/images/gre.jpg",
                            IsFamiliar = false,
                            Term = "abjure"
                        },
                        new
                        {
                            Id = 5,
                            Definition = "to abolish, usually by authority",
                            FlashcardSetId = 1,
                            ImagePath = "/images/gre.jpg",
                            IsFamiliar = false,
                            Term = "abrogate"
                        },
                        new
                        {
                            Id = 6,
                            Definition = "to leave hurriedly and secretly, typically to avoid detection or arrest",
                            FlashcardSetId = 1,
                            ImagePath = "/images/gre.jpg",
                            IsFamiliar = false,
                            Term = "abscond"
                        },
                        new
                        {
                            Id = 7,
                            Definition = "sparing in eating and drinking; temperate",
                            FlashcardSetId = 1,
                            ImagePath = "/images/gre.jpg",
                            IsFamiliar = false,
                            Term = "abstemious"
                        },
                        new
                        {
                            Id = 8,
                            Definition = "to caution or advise against something; to scold mildly; to remind of a duty",
                            FlashcardSetId = 1,
                            ImagePath = "/images/gre.jpg",
                            IsFamiliar = false,
                            Term = "admonish"
                        },
                        new
                        {
                            Id = 9,
                            Definition = "A matrix is a collection of numbers arranged into a fixed number of rows and columns.",
                            FlashcardSetId = 2,
                            ImagePath = "/images/linear_algebra.jpg",
                            IsFamiliar = false,
                            Term = "Matrix"
                        },
                        new
                        {
                            Id = 10,
                            Definition = "A determinant is a scalar value derived from a square matrix.",
                            FlashcardSetId = 2,
                            ImagePath = "/images/linear_algebra.jpg",
                            IsFamiliar = false,
                            Term = "Determinant"
                        },
                        new
                        {
                            Id = 11,
                            Definition = "An eigenvalue is a scalar that is a special set of scalars associated with a linear system of equations.",
                            FlashcardSetId = 2,
                            ImagePath = "/images/linear_algebra.jpg",
                            IsFamiliar = false,
                            Term = "Eigenvalue"
                        },
                        new
                        {
                            Id = 12,
                            Definition = "An eigenvector is a nonzero vector that stays in the same direction after a linear transformation.",
                            FlashcardSetId = 2,
                            ImagePath = "/images/linear_algebra.jpg",
                            IsFamiliar = false,
                            Term = "Eigenvector"
                        },
                        new
                        {
                            Id = 13,
                            Definition = "The transpose of a matrix is a new matrix whose rows are the columns of the original.",
                            FlashcardSetId = 2,
                            ImagePath = "/images/linear_algebra.jpg",
                            IsFamiliar = false,
                            Term = "Transpose"
                        });
                });

            modelBuilder.Entity("EbbinghausFlashcardApp.Models.FlashcardSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewInterval")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FlashcardSets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 9, 0, 43, 3, 56, DateTimeKind.Utc).AddTicks(3617),
                            Description = "Essential Spanish words for beginners",
                            ImagePath = "/images/gre.jpg",
                            Name = "GRE verbal vocabs",
                            NextReviewDate = new DateTime(2024, 11, 9, 0, 43, 3, 56, DateTimeKind.Utc).AddTicks(3622),
                            ReviewInterval = -1,
                            UserId = "b0dbe1be-79c1-4ea8-aeb8-56ca5314922e"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 8, 19, 43, 3, 56, DateTimeKind.Local).AddTicks(3628),
                            Description = "Linear Algebra Crash Course",
                            ImagePath = "/images/linear_algebra.jpg",
                            Name = "Linear Algebra",
                            NextReviewDate = new DateTime(2024, 11, 8, 19, 43, 3, 56, DateTimeKind.Local).AddTicks(3682),
                            ReviewInterval = -1,
                            UserId = "b0dbe1be-79c1-4ea8-aeb8-56ca5314922e"
                        });
                });

            modelBuilder.Entity("EbbinghausFlashcardApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EbbinghausFlashcardApp.Models.Flashcard", b =>
                {
                    b.HasOne("EbbinghausFlashcardApp.Models.FlashcardSet", "FlashcardSet")
                        .WithMany("Flashcards")
                        .HasForeignKey("FlashcardSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashcardSet");
                });

            modelBuilder.Entity("EbbinghausFlashcardApp.Models.FlashcardSet", b =>
                {
                    b.HasOne("EbbinghausFlashcardApp.Models.User", "User")
                        .WithMany("FlashcardSets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EbbinghausFlashcardApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EbbinghausFlashcardApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EbbinghausFlashcardApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EbbinghausFlashcardApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EbbinghausFlashcardApp.Models.FlashcardSet", b =>
                {
                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("EbbinghausFlashcardApp.Models.User", b =>
                {
                    b.Navigation("FlashcardSets");
                });
#pragma warning restore 612, 618
        }
    }
}
